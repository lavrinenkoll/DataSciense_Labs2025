import pandas as pd
from matplotlib import pyplot as plt
import numpy as np
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

from lab1.parser import Parser
from lab1.statistical import NUMBER_OF_SEPARATION_LINES
from lab1.tools import results_trend
from lab1.synthetic_data import SyntheticData

from lab2.anomaly import AnomalyGenerator
from lab2.anomaly_processing import AnomalyProcessing

MAX_DEGREE_POLYNOMIAL = 100


def process_data(data_x, data_y, title_x, title_y, max_degree=30, noise_factor=0.05, number_x=200, type_of_noise='uniform'):
    datastats = results_trend(data_x, data_y, title_x, title_y, max_degree)

    if type_of_noise == 'uniform':
        synthetic_data = SyntheticData(datastats.x, datastats.y, datastats.intercept, datastats.coef, datastats.model,
                                       title_y,
                                       noise_factor=noise_factor, number_x=number_x, type_of_noise='uniform')
        synthetic_data.start_generation()

    else:
        synthetic_data = SyntheticData(datastats.x, datastats.y, datastats.intercept, datastats.coef, datastats.model,
                                       title_y,
                                       noise_factor=noise_factor, number_x=number_x, type_of_noise='normal')
        synthetic_data.start_generation()

    return datastats, synthetic_data


def quality_and_poly_model(x, original_data, cleaned_data, degree, plot=True):
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–ø—ñ–ª—å–Ω—É –¥–æ–≤–∂–∏–Ω—É
    min_len = min(len(original_data), len(cleaned_data), len(x))
    x = np.array(x[:min_len])
    y_orig = np.array(original_data[:min_len])
    y_clean = np.array(cleaned_data[:min_len])

    # –ü–æ–ª—ñ–Ω–æ–º—ñ–∞–ª—å–Ω—ñ —Ñ—ñ—á—ñ
    poly = PolynomialFeatures(degree=degree)
    X_poly = poly.fit_transform(x.reshape(-1, 1))

    # –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π
    model_orig = LinearRegression().fit(X_poly, y_orig)
    model_clean = LinearRegression().fit(X_poly, y_clean)

    # –ü—Ä–æ–≥–Ω–æ–∑–∏
    y_pred_orig = model_orig.predict(X_poly)
    y_pred_clean = model_clean.predict(X_poly)

    # –ú–µ—Ç—Ä–∏–∫–∏
    mse = mean_squared_error(y_pred_orig, y_pred_clean)
    mae = mean_absolute_error(y_pred_orig, y_pred_clean)
    rmse = np.sqrt(mse)
    r2 = r2_score(y_pred_orig, y_pred_clean)

    print('-' * NUMBER_OF_SEPARATION_LINES)
    print(f'üîé –û—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ –æ—á–∏—â–µ–Ω–Ω—è (—á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—ñ –ø–æ–ª—ñ–Ω–æ–º–∞ —Å—Ç—É–ø–µ–Ω—è {degree}):')
    print(f'MSE : {mse:.4f}')
    print(f'MAE : {mae:.4f}')
    print(f'RMSE: {rmse:.4f}')
    print(f'R¬≤  : {r2:.4f}')
    print('-' * NUMBER_OF_SEPARATION_LINES)

    # –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞
    if plot:
        plt.figure(figsize=(10, 5))
        plt.plot(x, y_clean, label='–û—á–∏—â–µ–Ω—ñ –¥–∞–Ω—ñ', alpha=0.5)
        plt.plot(x, y_orig, label='–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ', alpha=0.5)
        plt.plot(x, y_pred_orig, label='–ú–æ–¥–µ–ª—å (–æ—Ä–∏–≥—ñ–Ω–∞–ª)', linestyle='--')
        plt.plot(x, y_pred_clean, label='–ú–æ–¥–µ–ª—å (–æ—á–∏—â–µ–Ω—ñ)', linestyle='--')
        plt.legend()
        plt.title(f'–ü–æ–ª—ñ–Ω–æ–º—ñ–∞–ª—å–Ω–µ –∞–ø—Ä–æ–∫—Å–∏–º—É–≤–∞–Ω–Ω—è (—Å—Ç—É–ø—ñ–Ω—å={degree})')
        plt.xlabel('–ß–∞—Å')
        plt.ylabel('–ó–Ω–∞—á–µ–Ω–Ω—è')
        plt.grid(True)
        plt.tight_layout()
        plt.show()

    return mse, mae, rmse, r2


def train_polynomial_model(x, y, degree=2):
    # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è
    x_mean, x_std = np.mean(x), np.std(x)
    x_norm = (x - x_mean) / x_std

    coeffs = np.polyfit(x_norm, y, degree)
    poly = np.poly1d(coeffs)

    # –§–æ—Ä–º—É–ª–∞
    formula = "y(t) = " + " + ".join([
        f"{c:.6f}*t^{deg}" for deg, c in zip(range(degree, -1, -1), coeffs)
    ])

    print("–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –º–æ–¥–µ–ª—ñ:", coeffs)
    print("–†—ñ–≤–Ω—è–Ω–Ω—è (–Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–µ t):", formula)
    return poly, coeffs, formula, x_mean, x_std


def plot_polynomial_regression(x, y, poly, formula, x_mean, x_std):
    x_norm = (x - x_mean) / x_std
    y_pred = poly(x_norm)

    plt.figure(figsize=(10, 5))
    plt.plot(x, y, label="–í–∏—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ")
    plt.plot(x, y_pred, 'r-', label="–ü–æ–ª—ñ–Ω–æ–º—ñ–∞–ª—å–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è")
    plt.title("–ü–æ–ª—ñ–Ω–æ–º—ñ–∞–ª—å–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è (–ú–ù–ö)\n")
    plt.xlabel("x")
    plt.ylabel("y")
    plt.legend()
    plt.grid(True)
    plt.show()


def plot_polynomial_extrapolation(x, y, poly, x_mean, x_std, interval=0.5):
    n = len(x)
    delta = x[1] - x[0]
    new_points = int(n * interval)
    x_ext = np.linspace(x[0], x[-1] + delta * new_points, n + new_points)
    x_ext_norm = (x_ext - x_mean) / x_std
    y_ext = poly(x_ext_norm)

    plt.figure(figsize=(10, 5))
    plt.plot(x, y, label="–í–∏—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ")
    plt.plot(x_ext, y_ext, 'r--', label="–ü—Ä–æ–≥–Ω–æ–∑ (–µ–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü—ñ—è)")
    plt.axvline(x[-1], color='gray', linestyle='--', label="–ö—Ä–∞–π —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è")
    plt.title(f"–ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è (–µ–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü—ñ—è) –Ω–∞ {interval} —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É")
    plt.xlabel("x")
    plt.ylabel("y")
    plt.legend()
    plt.grid(True)
    plt.show()


def alpha_beta_filter(x, y):
    T0 = 1
    n = len(y)
    y = np.array(y).reshape(-1, 1)
    x = np.array(x).reshape(-1, 1)

    y_filtered = np.zeros_like(y)

    # –ü–æ—á–∞—Ç–∫–æ–≤—ñ —É–º–æ–≤–∏
    speed_est = (y[1, 0] - y[0, 0]) / T0
    y_pred = y[0, 0] + speed_est

    y_filtered[0, 0] = y[0, 0]

    for i in range(1, n):
        # –î–∏–Ω–∞–º—ñ—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç—ñ–≤
        alpha = (2 * (2 * i - 1)) / (i * (i + 1))
        beta = 6 / (i * (i + 1))

        # –ü–æ–º–∏–ª–∫–∞ –º—ñ–∂ –≤–∏–º—ñ—Ä–æ–º —ñ –ø—Ä–æ–≥–Ω–æ–∑–æ–º
        error = y[i, 0] - y_pred

        # –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ —Ä–æ–∑–±—ñ–∂–Ω–æ—Å—Ç—ñ: –æ–±–º–µ–∂—É—î–º–æ –ø–æ–º–∏–ª–∫—É
        max_error = 3 * np.std(y[:i]) if i > 10 else 1e4
        if abs(error) > max_error:
            error = np.sign(error) * max_error

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–≥–ª–∞–¥–∂–µ–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
        y_filtered[i, 0] = y_pred + alpha * error

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
        speed_est = speed_est + (beta / T0) * error

        # –ù–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑
        y_pred = y_filtered[i, 0] + speed_est

    # –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞
    plt.figure(figsize=(10, 6))
    plt.plot(x, y, label='–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ', alpha=0.6)
    plt.plot(x, y_filtered, label='–ü—ñ—Å–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è (Œ±-Œ≤ —Ñ—ñ–ª—å—Ç—Ä)', linewidth=2)
    plt.title("–†–µ–∫—É—Ä—Å–∏–≤–Ω–µ –∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Œ±-Œ≤ —Ñ—ñ–ª—å—Ç—Ä–∞")
    plt.xlabel("–ß–∞—Å")
    plt.ylabel("–ó–Ω–∞—á–µ–Ω–Ω—è")
    plt.legend()
    plt.grid(True)
    plt.show()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
    print('–°—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –¥–ª—è –∑–≥–ª–∞–¥–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö:')
    print(f'–°–µ—Ä–µ–¥–Ω—î: {np.mean(y_filtered):.2f}')
    print(f'–ú–µ–¥—ñ–∞–Ω–∞: {np.median(y_filtered):.2f}')
    print(f'–ú—ñ–Ω—ñ–º—É–º: {np.min(y_filtered):.2f}')
    print(f'–ú–∞–∫—Å–∏–º—É–º: {np.max(y_filtered):.2f}')
    print(f'–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: {np.std(y_filtered):.2f}')
    print(f'–î–∏—Å–ø–µ—Ä—Å—ñ—è: {np.var(y_filtered):.2f}')
    print(f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: {len(y_filtered)}')

    # r2 –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å
    r_squared = r2_score(y, y_filtered)
    print(f'R¬≤: {r_squared:.4f}')

    print('-' * NUMBER_OF_SEPARATION_LINES)

    return y_filtered


if __name__ == '__main__':
    # parse data from ekatalog website, save to files
    # https://ek.ua/ua/ECOFLOW-DELTA-2.htm
    url = input('–í–≤–µ–¥—ñ—Ç—å URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Ç–æ–≤–∞—Ä—É –Ω–∞ ekatalog): ')
    if not url:
        url = 'https://ek.ua/ua/CANON-50MM-F-1-4-EF-USM.htm'
    #url = 'https://ek.ua/ua/ECOFLOW-DELTA-2.htm'
    parser = Parser(url)
    price_change, number_of_shops = parser.parse_table(save_to_files=False)

    # read from file, if needed
    # price_change = pd.read_excel('./data/ECOFLOW-DELTA-2_price_change.xlsx')
    # number_of_shops = pd.read_excel('./data/ECOFLOW-DELTA-2_number_of_shops.xlsx')

    type_of_noise = input('–í–≤–µ–¥—ñ—Ç—å —Ç–∏–ø —à—É–º—É (uniform –∞–±–æ normal, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º normal): ')
    if type_of_noise not in ['uniform', 'normal']:
        type_of_noise = 'normal'
    noise = input('–í–≤–µ–¥—ñ—Ç—å —Ñ–∞–∫—Ç–æ—Ä —à—É–º—É (–≤—ñ–¥ 0 –¥–æ 1, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 0.05): ')
    number_x = input(
        f'–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞—á–µ–Ω—å –¥–ª—è —Å–∏–Ω—Ç–µ—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 10*–æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ: {10*len(price_change)}): ')

    print('-' * NUMBER_OF_SEPARATION_LINES)
    noise_factor = float(noise) if noise else 0.05
    number_x = int(number_x) if number_x else 10*len(price_change)
    degree = MAX_DEGREE_POLYNOMIAL


    datastats, synthetic_data = process_data(price_change['date'], price_change['avg'], '–î–∞—Ç–∞', '–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞',
                 max_degree=degree, noise_factor=noise_factor, number_x=number_x, type_of_noise=type_of_noise)

    # datastats, synthetic_data = process_data(price_change['date'], price_change['max'], '–î–∞—Ç–∞', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞',
    #                                             max_degree=degree, noise_factor=noise_factor, number_x=number_x,
    #                                             type_of_noise=type_of_noise)

    # datastats, synthetic_data = process_data(price_change['date'], price_change['min'], '–î–∞—Ç–∞', '–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞',
    #                                             max_degree=degree, noise_factor=noise_factor, number_x=number_x,
    #                                             type_of_noise=type_of_noise)


    # anomalyes
    number_of_anomalies = input('–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–Ω–æ–º–∞–ª—å–Ω–∏—Ö –≤–∏–º—ñ—Ä—ñ–≤ —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 5%): ')
    number_of_anomalies = int(number_of_anomalies)/100 if number_of_anomalies else 0.05
    coef_anomalies = input('–í–≤–µ–¥—ñ—Ç—å –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∞–Ω–æ–º–∞–ª—å–Ω–∏—Ö –≤–∏–º—ñ—Ä—ñ–≤ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 1.25): ')
    coef_anomalies = float(coef_anomalies) if coef_anomalies else 1.25

    anomaly_generator = AnomalyGenerator(number_of_anomalies, coef_anomalies, synthetic_data.x_synthetic,
                                            synthetic_data.y_synthetic, synthetic_data.y_synthetic_trend)
    anomaly_generator.draw_anomalies()

    # anomaly processing
    print('-' * NUMBER_OF_SEPARATION_LINES)
    print('–û–±—Ä–æ–±–∫–∞ –∞–Ω–æ–º–∞–ª—ñ–π (–º–µ—Ç–æ–¥ —É—Å—É–Ω–µ–Ω–Ω—è - –≤–∏–¥–∞–ª–µ–Ω–Ω—è)')
    print('-' * NUMBER_OF_SEPARATION_LINES)
    anomaly_processing = AnomalyProcessing(anomaly_generator.x, anomaly_generator.anomalies)
    anomaly_processing.start_processing(method='remove')


    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ —è–∫–æ—Å—Ç—ñ –≤–∏–¥–∞–ª–µ–Ω–∏—Ö –∞–Ω–æ–º–∞–ª—ñ–π, –ø–æ—Ä—ñ–≤–Ω—è—Ç–∏ –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
    quality_and_poly_model(synthetic_data.x_synthetic, synthetic_data.y_synthetic,
                               anomaly_processing.y, degree=len(synthetic_data.coef), plot=True)


    print('-' * NUMBER_OF_SEPARATION_LINES)
    print('–û–±—Ä–æ–±–∫–∞ –∞–Ω–æ–º–∞–ª—ñ–π (–º–µ—Ç–æ–¥ —É—Å—É–Ω–µ–Ω–Ω—è - —Å–µ—Ä–µ–¥–Ω—î)')
    print('-' * NUMBER_OF_SEPARATION_LINES)
    anomaly_processing = AnomalyProcessing(anomaly_generator.x, anomaly_generator.anomalies)
    anomaly_processing.start_processing(method='mean')

    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ —è–∫–æ—Å—Ç—ñ –≤–∏–¥–∞–ª–µ–Ω–∏—Ö –∞–Ω–æ–º–∞–ª—ñ–π, –ø–æ—Ä—ñ–≤–Ω—è—Ç–∏ –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
    quality_and_poly_model(synthetic_data.x_synthetic, synthetic_data.y_synthetic,
                           anomaly_processing.y, degree=len(synthetic_data.coef), plot=True)

    # –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ä–µ–∫—É—Ä–µ–Ω—Ç–Ω–µ –∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è alfa-beta, –∞–±–æ alfa-beta-gamma —Ñ—ñ–ª—å—Ç—Ä–æ–º —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–∏—Ö –≤ –ø.1, 2 –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö. –ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞—Ö–æ–¥–∏ –ø–æ–¥–æ–ª–∞–Ω–Ω—è
    # —è–≤–∏—â–∞ ¬´—Ä–æ–∑–±—ñ–∂–Ω–æ—Å—Ç—ñ¬ª —Ñ—ñ–ª—å—Ç—Ä–∞. –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ ‚Äì anomaly_processing.x, anomaly_processing.y
    alpha_beta_filter(anomaly_processing.x, anomaly_processing.y)


    # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è –ø–æ–ª—ñ–Ω–æ–º—ñ–∞–ª—å–Ω–æ—ó –º–æ–¥–µ–ª—ñ –∑–∞ –º–µ—Ç–æ–¥–æ–º –Ω–∞–π–º–µ–Ω—à–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç—ñ–≤
    # (–ú–ù–ö ‚Äì LSM) ‚Äì –ø–æ–ª—ñ–Ω–æ–º—ñ–∞–ª—å–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è –¥–ª—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö, –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –≤ –ø.1,2. - synthetic_data.x, synthetic_data.y
    # –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è (–µ–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü—ñ—é) –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–æ—Å–ª—ñ–¥–∂—É–≤–∞–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É –∑–∞ ¬´–Ω–∞–≤—á–µ–Ω–æ—é¬ª
    # –º–æ–¥–µ–ª–ª—é –Ω–∞ 0,5 —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è (–æ–±‚Äô—î–º—É –≤–∏–±—ñ—Ä–∫–∏);
    x, y, degree = synthetic_data.x_synthetic, synthetic_data.y_synthetic, len(synthetic_data.coef)
    poly, coeffs, formula, x_mean, x_std = train_polynomial_model(x, y, degree=degree)
    plot_polynomial_regression(x, y, poly, formula, x_mean, x_std)
    plot_polynomial_extrapolation(x, y, poly, x_mean, x_std, interval=0.05)
    plot_polynomial_extrapolation(x, y, poly, x_mean, x_std, interval=0.5)

